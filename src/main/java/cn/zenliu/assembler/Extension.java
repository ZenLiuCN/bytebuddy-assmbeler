/*
 * Copyright (c) 2022. Zen Liu.
 * SPDX-License-Identifier: GPL-2.0-only WITH Classpath-exception-2.0
 */

package cn.zenliu.assembler;

import net.bytebuddy.build.BuildLogger;
import net.bytebuddy.description.type.TypeDescription;
import net.bytebuddy.dynamic.ClassFileLocator;
import net.bytebuddy.dynamic.DynamicType;
import net.bytebuddy.matcher.ElementMatcher;

import java.io.File;
import java.util.List;

/**
 * Extension use in {@link ByteBuddyPlugin}
 * @author Zen.Liu
 * @since 2022-10-30
 */
public interface Extension extends AutoCloseable,Comparable<Extension>{
    /**
     * return the Junction to match type will process by this Extension
     * @param classRoot  current class path root
     * @param logger the build logger
     * @return the junction
     */
    ElementMatcher.Junction<TypeDescription> matcher(File classRoot, BuildLogger logger);

    /**
     * @param builder current Builder
     * @param type current target type
     * @param extra extra types which generated by other extension (should always save by who generate it, or modified it)
     * @param locator ClassFileLocator
     * @param classRoot current ClassRoot
     * @param logger logger
     * @return the after processed Builder
     */
    DynamicType.Builder<?> apply(DynamicType.Builder<?> builder,
                                 TypeDescription type,
                                 List<DynamicType.Builder<?>> extra,
                                 ClassFileLocator locator,
                                 File classRoot,
                                 BuildLogger logger);

    /**
     * induce the process order for extensions with same {@link #matcher(File, BuildLogger)}
     * @param o the object to be compared.
     * @return  -1 pre 0 same -1 after
     */
    @Override
    default int compareTo(Extension o) {
        return 0;
    }

    /**
     * free resources before plugin closed
     */
    @Override
    default void close() {

    }
}
